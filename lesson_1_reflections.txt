How did viewing a diff between two versions of a file help you see the bug 
that was introduced?

The problem was in the parts that changed because the code was working before 
the changes, so we should focus on the differences not on the entire file.

***************
How could having easy access to the entire history of a file make you a 
more efficient programmer in the long term?

If I have a bug I can find it more quickly because I can compare this version 
with a previuos working version. Also, I can change the code to be better without 
fear as I can always go back to a working version.

***************
What do you think are the pros and cons of manually choosing when to create a commit, 
like you do in Git, vs having versions automatically saved, like Google Docs does?

Having versions saved manually let you commit whenever you want but, you may forget 
to commit when you should do it. Or it can be actually too late when you notice you 
should have made a commit.
When the versions are saved automatically I might not actually have a working version.
And it's difficult to understand what changes are introduced in each version.

***************
Why do you think some version control systems, like Git, allow saving multiple files in 
one commit, while others, like Google Docs, treat each file separately?

This according to the purpose of the files. In Google Docs the files are independent so 
there is no need to save multiple files in one commit. But in Git the files are related 
and may a change in one of them effect the others.

****************
How can you use the commands git log and git diff to view the history of files?

* git log can be used to list the summaries of all the changes made to the repository.
* git diff can be used to see what has actually changed between two given commits.

*****************
How might using version control make you more confident to make changes that could break something?

You can try changing any critical features, since you can always revert back to the 
point when those were working correctly. If you find something is not working, you can 
git log, and try the previous versions untill you find the one which works, and make 
diff of the last one that worked correctly and the commit following it. That result 
would show where and how the bug was introduced.

*****************
Now that you have your workspace set up, what do you want to try using Git for?

Writing my own programs.